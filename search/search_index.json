{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Etcher","text":"<p>In-place, continuous templater. Powered by Jinja.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#python","title":"Python","text":"<p>You can install Etcher via pip from PyPI:</p> <pre><code>pip install etcher\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Please see the documentation for details.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are very welcome. To learn more, see the Contributor Guide.</p>"},{"location":"#license","title":"License","text":"<p>Distributed under the terms of the MIT license, Etcher is free and open source software.</p>"},{"location":"#issues","title":"Issues","text":"<p>If you encounter any problems, please file an issue along with a detailed description.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,     and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall     community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of     any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,     without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a     professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at zakstucke@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributor Guide","text":"<p>Thank you for your interest in improving this project.</p> <p>This project is open-source under the MIT license and welcomes contributions in the form of bug reports, feature requests, and pull requests.</p> <p>Here is a list of important resources for contributors:</p> <ul> <li>Source Code</li> <li>Documentation</li> <li>Issue Tracker</li> <li>Code of Conduct</li> </ul>"},{"location":"CONTRIBUTING/#how-to-report-a-bug","title":"How to report a bug","text":"<p>Report bugs on the Issue Tracker.</p> <p>When filing an issue, make sure to answer these questions:</p> <ul> <li>Which operating system and core package versions are you using? (the applicable of rust/python/node etc)</li> <li>Which version of this project are you using?</li> <li>What did you do?</li> <li>What did you expect to see?</li> <li>What did you see instead?</li> </ul> <p>The best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue.</p>"},{"location":"CONTRIBUTING/#how-to-request-a-feature","title":"How to request a feature","text":"<p>Request features on the Issue Tracker.</p>"},{"location":"CONTRIBUTING/#how-to-set-up-your-development-environment","title":"How to set up your development environment","text":"<ul> <li>Clone the repo: <code>git clone https://github.com/zakstucke/etcher</code></li> <li>Install <code>pipx</code></li> <li><code>./dev_scripts/initial_setup.sh initial_setup</code></li> </ul>"},{"location":"CONTRIBUTING/#python","title":"Python","text":"<ul> <li>Make sure Python 3.8+ is installed</li> <li>Install <code>PDM</code></li> </ul>"},{"location":"CONTRIBUTING/#running-tests","title":"Running tests","text":"<p>Checkout scripts in <code>./dev_scripts/</code> for how the system can be run, <code>test.sh</code> in particular. Run the full test suite with <code>./dev_scripts/test.sh all</code></p>"},{"location":"CONTRIBUTING/#how-to-submit-changes","title":"How to submit changes","text":"<p>Open a pull request to submit changes to this project.</p> <p>Your pull request needs to meet the following guidelines for acceptance:</p> <ul> <li>The Nox test suite must pass without errors and warnings.</li> <li>Include unit tests. This project maintains 100% code coverage.</li> <li>If your changes add functionality, update the documentation accordingly.</li> </ul> <p>Feel free to submit early, though\u2014we can always iterate on this.</p> <p>It is recommended to open an issue before starting work on anything. This will allow a chance to talk it over with the owners and validate your approach.</p>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright \u00a9 2023 Zachary Stucke</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"py_ref/","title":"etcher","text":"<p>Etcher.</p>"},{"location":"py_ref/#python.etcher.process","title":"<code>process(root, context, exclude=None, jinja=None, gitignore_path='.gitignore', template_matcher='etch', child_flag='!etch:child', writer=_default_writer)</code>","text":"<p>Reads the recursive contents of target and writes the compiled files.</p> <p>Parameters:</p> Name Type Description Default <code>root</code> <code>pathlike object</code> <p>The target directory to search or direct template or child.</p> required <code>context</code> <code>dict</code> <p>The globals to pass to the Jinja environment.</p> required <code>exclude</code> <code>list[str]</code> <p>Exclude files/directories matching these patterns. Read as git-style ignore patterns. Defaults to [].</p> <code>None</code> <code>jinja</code> <code>dict[str, Any]</code> <p>Jinja custom config, used when creating the Jinja Environment. https://jinja.palletsprojects.com/en/3.1.x/api/#jinja2.Environment. Defaults to {}.</p> <code>None</code> <code>gitignore_path</code> <code>pathlike object</code> <p>Path to the gitignore file. Useful if running from a sub-directory. Set to None to ignore the file. Defaults to '.gitignore'.</p> <code>'.gitignore'</code> <code>template_matcher</code> <code>str</code> <p>The match string to identify in-place templates or placeholders pointing to templates. Defaults to 'etch'. E.g. 'foo.etch.txt'.</p> <code>'etch'</code> <code>child_flag</code> <code>str</code> <p>The match string to identify child templates. Defaults to '!etch:child'. E.g. 'foo.etch.txt' with contents '!etch:child ./templates/template.txt' will be replaced with the compiled contents of 'template.txt'.</p> <code>'!etch:child'</code> <code>writer</code> <code>callable</code> <p>The function to write the compiled files. Useful for testing. Defaults to _default_writer.</p> <code>_default_writer</code> <p>Returns:</p> Type Description <code>list[Path]</code> <p>list[pathlib.Path]: The paths of the files that were written.</p> Source code in <code>python/etcher/_process.py</code> <pre><code>def process(\n    root: StrPath,\n    context: tp.MutableMapping[str, tp.Any],\n    exclude: \"tp.Optional[list[str]]\" = None,\n    jinja: \"tp.Optional[dict[str, tp.Any]]\" = None,\n    gitignore_path: tp.Optional[StrPath] = \".gitignore\",\n    template_matcher: str = \"etch\",\n    child_flag: str = \"!etch:child\",\n    writer: tp.Callable[[pathlib.Path, str], None] = _default_writer,\n) -&gt; \"list[pathlib.Path]\":\n    \"\"\"Reads the recursive contents of target and writes the compiled files.\n\n    Args:\n        root (pathlike object): The target directory to search or direct template or child.\n        context (dict): The globals to pass to the Jinja environment.\n        exclude (list[str], optional): Exclude files/directories matching these patterns. Read as git-style ignore patterns. Defaults to [].\n        jinja (dict[str, Any], optional): Jinja custom config, used when creating the Jinja Environment. https://jinja.palletsprojects.com/en/3.1.x/api/#jinja2.Environment. Defaults to {}.\n        gitignore_path (pathlike object, optional): Path to the gitignore file. Useful if running from a sub-directory. Set to None to ignore the file. Defaults to '.gitignore'.\n        template_matcher (str, optional): The match string to identify in-place templates or placeholders pointing to templates. Defaults to 'etch'. E.g. 'foo.etch.txt'.\n        child_flag (str, optional): The match string to identify child templates. Defaults to '!etch:child'. E.g. 'foo.etch.txt' with contents '!etch:child ./templates/template.txt' will be replaced with the compiled contents of 'template.txt'.\n        writer (callable, optional): The function to write the compiled files. Useful for testing. Defaults to _default_writer.\n\n    Returns:\n        list[pathlib.Path]: The paths of the files that were written.\n    \"\"\"\n    environment = Environment(**jinja if jinja is not None else {})  # nosec\n\n    if gitignore_path is not None:\n        try:\n            with open(gitignore_path, \"r\") as file:\n                gitignore_text = file.read()\n        except FileNotFoundError as e:\n            raise FileNotFoundError(\n                f\"Could not find gitignore file at {gitignore_path}. In config, set 'gitignore_path' to a valid path or set 'gitignore_path=None'.\"\n            ) from e\n    else:\n        gitignore_text = \"\"\n\n    # Create a matcher from the gitignore and extra includes which will be negated in search:\n    spec = pathspec.PathSpec.from_lines(\n        pathspec.patterns.GitWildMatchPattern,  # type: ignore\n        gitignore_text.splitlines() + (exclude if exclude is not None else []),\n    )\n\n    matcher_with_dots = f\".{template_matcher}.\"\n\n    # Find and compile all the templates:\n    outputs: \"list[tuple[pathlib.Path, str]]\" = []\n    if os.path.isfile(root):\n        # The match_tree_files fn doesn't work with files, so check in here and return if doesn't match:\n        if len(list(spec.match_files([root], negate=True))) == 0:\n            return []\n        # The match_tree_files fn also returns relative paths to root, so mark this a root individual file to handle accordingly later:\n        is_individual_file = True\n        iterator = [str(root)]\n    else:\n        is_individual_file = False\n        iterator = spec.match_tree_files(root, negate=True)\n\n    for rel_filepath in iterator:\n        if matcher_with_dots not in rel_filepath:\n            continue\n\n        filepath = os.path.join(root, rel_filepath) if not is_individual_file else root\n\n        path = pathlib.Path(filepath)\n        with open(path, \"r\") as file:\n            contents = file.read()\n\n        # If the contents contains the child flag, everything after it should be the path to a template:\n        if child_flag in contents:\n            root_template_path = pathlib.Path(contents.split(child_flag)[1].strip())\n\n            # Raise an error if the path doesn't exist:\n            if not root_template_path.exists():\n                raise FileNotFoundError(\n                    f\"Invalid child template. File matched with contents: '{contents}'. Could not find source template at {root_template_path}.\"\n                )\n\n            with open(root_template_path, \"r\") as file:\n                template_contents = file.read().strip()\n        else:\n            template_contents = contents\n\n        out_path = path.with_name(path.name.replace(matcher_with_dots, \".\"))\n        outputs.append(\n            (\n                out_path,\n                environment.from_string(template_contents, globals=context).render(),\n            )\n        )\n\n    # Write the processed files now everything compiled successfully:\n    for path, compiled in outputs:\n        writer(path, compiled)\n\n    return [path for path, _ in outputs]\n</code></pre>"},{"location":"py_ref/SUMMARY/","title":"SUMMARY","text":"<ul> <li>etcher</li> </ul>"}]}